// STATE
let gameState = {
    totalNumOfResources: 0,
    numOfPassiveResourcesGenerated: 0,
    intervalLoopID: undefined
}

let passiveResourceGeneratedText = document.getElementById("passive-resources-generated-total")
let powerlevelNumEle = document.getElementById("power-level-num");

// PROCESS TO ADDING AN EVENT LISTENER TO AN HTML ELEMENT 
// Step #1) Make sure that you are "fetching", or accessing that element, through the DOM using a method like getElementById or getElementsByClassName/TagName

let powerlevelElement = document.getElementById("the-power-level");

// Step #2) Setting up your event listener and connecting it to the element that you want 
    // Step #2a) Remember - event listeners require callback functions. Sometimes, it is helpful to write your callback functions OUTSIDE of the .addEventListener method. 
    // Tip: Callback functions are just functions that are passed in as an argument to another function. 

function powerlevelIncrementer() {
    gameState.totalNumOfResources = gameState.totalNumOfResources + 1; 
    powerlevelNumEle.textContent = gameState.totalNumOfResources; 
};

// Setting up our event listener below:
powerlevelElement.addEventListener("click", powerlevelIncrementer)

// SETTING UP OUR FIRST BELL BAG PRODUCER
// Step 1) Grab the button element (or whatever element you want for your users to click on)

let gokuBttnEle = document.getElementById("goku-bttn"); 

// Step 2) I want to attach an event listener to that button element. 
    // Step 2a) Let's also create our callback functions that we are going to use. 

function gokuProducerPurchaser () {
    // I have to make sure that I have at least 5 bells available 
    if (gameState.totalNumOfResources >= 20) {
        // If I buy this producer, I have to subtract the total cost of the producer from my total num of resources 
        gameState.totalNumOfResources -= 20;
        // Let's also change the text on our website to represent our updated totalNumOfResources
        powerlevelNumEle.textContent = gameState.totalNumOfResources;
        // I have to increment the gameState.numOfPassiveResourcesGenerated by however much this producer is worth
        gameState.numOfPassiveResourcesGenerated += 1;
        // Lastly, i have to update the visual representation of the number of passive resources generated (i.e. changing the HTML text for #passive-resources-generated-total)
        passiveResourceGeneratedText.textContent = gameState.numOfPassiveResourcesGenerated;
    }
};

// attaching this callback function to the HTML element with an event listener
gokuBttnEle.addEventListener("click", gokuProducerPurchaser)

// SETINTERVAL / CLEARINTERVAL DEMO
// Syntax for setInterval()
    // Exa: setInterval(nameOfCallbackFunc, numOfMSThatThisLoopWillRepeat)
    // Note: setInterval --> this method will return an id number that represents the interval loop that is being run 
// Syntax for clearInterval()
    // Exa: clearInterval(idNumOfTheIntervalLoop)

let startBttnEle = document.getElementById("start-bttn"); 

function startIncrementingTheBells() {
    // First, let's increment the num of resources in our gameState variable, and we'll increment it by however many passive resources I'm currently generating 
    gameState.totalNumOfResources += gameState.numOfPassiveResourcesGenerated
    // Update the text of my website that represents my total num of resources 
    powerlevelNumEle.textContent = gameState.totalNumOfResources; 
}

// let's write our function which will kick off our interval looping
function setUpIncrementationInterval() {
    gameState.intervalLoopID = setInterval(startIncrementingTheBells, 1000) 
    console.log(gameState.intervalLoopID);
    // the setInterval method will return an automatically generated id number 
    // we need  this id number to pause the loop later on
}

// Click the start bttn --> this triggers the setUpIncrementationInterval function --> that function invokes the setInterval method --> the setIntervalMethod runs the startIncrementingTheBells function every 1000 ms

// Attach our event listener to the start button
startBttnEle.addEventListener("click", setUpIncrementationInterval);

// HOW WE SET UP A PAUSE INTERVAL TYPE OF BUTTON 

// 1) grab the element 
let pauseBttnEle = document.getElementById("pause-bttn"); 

function pauseIntervalLoop() {
    clearInterval(gameState.intervalLoopID);
};

pauseBttnEle.addEventListener("click", pauseIntervalLoop)
;

// Setting up our event listener below:
powerlevelElement.addEventListener("click", powerlevelIncrementer)




let gokuBttn2Ele = document.getElementById("goku-bttn2");

function ssbProducer () {

    // I have to make sure that I have at least 5 bells available 
    if (gameState.totalNumOfResources >= 500) {
        // If I buy this producer, I have to subtract the total cost of the producer from my total num of resources 
        gameState.totalNumOfResources -= 500;
        // Let's also change the text on our website to represent our updated totalNumOfResources
        powerlevelNumEle.textContent = gameState.totalNumOfResources;
        // I have to increment the gameState.numOfPassiveResourcesGenerated by however much this producer is worth
        gameState.numOfPassiveResourcesGenerated +=6 ;
        // Lastly, i have to update the visual representation of the number of passive resources generated (i.e. changing the HTML text for #passive-resources-generated-total)
        passiveResourceGeneratedText.textContent = gameState.numOfPassiveResourcesGenerated;
    }
};

// attaching this callback function to the HTML element with an event listener
gokuBttn2Ele.addEventListener("click", ssbProducer)
;

// Setting up our event listener below:
powerlevelElement.addEventListener("click", powerlevelIncrementer)




let gokuBttn3Ele = document.getElementById("goku-bttn3");

function uiProducer () {

    // I have to make sure that I have at least 5 bells available 
    if (gameState.totalNumOfResources >= 20000) {
        // If I buy this producer, I have to subtract the total cost of the producer from my total num of resources 
        gameState.totalNumOfResources -= 20000;
        // Let's also change the text on our website to represent our updated totalNumOfResources
        powerlevelNumEle.textContent = gameState.totalNumOfResources;
        // I have to increment the gameState.numOfPassiveResourcesGenerated by however much this producer is worth
        gameState.numOfPassiveResourcesGenerated +=100 ;
        // Lastly, i have to update the visual representation of the number of passive resources generated (i.e. changing the HTML text for #passive-resources-generated-total)
        passiveResourceGeneratedText.textContent = gameState.numOfPassiveResourcesGenerated;
    }
};

// attaching this callback function to the HTML element with an event listener
gokuBttn3Ele.addEventListener("click", uiProducer)
;

// Setting up our event listener below:
powerlevelElement.addEventListener("click", powerlevelIncrementer)




let gokuBttn4Ele = document.getElementById("goku-bttn4");

function muiProducer () {

    // I have to make sure that I have at least 5 bells available 
    if (gameState.totalNumOfResources >= 1000000) {
        // If I buy this producer, I have to subtract the total cost of the producer from my total num of resources 
        gameState.totalNumOfResources -= 1000000;
        // Let's also change the text on our website to represent our updated totalNumOfResources
        powerlevelNumEle.textContent = gameState.totalNumOfResources;
        // I have to increment the gameState.numOfPassiveResourcesGenerated by however much this producer is worth
        gameState.numOfPassiveResourcesGenerated +=10000 ;
        // Lastly, i have to update the visual representation of the number of passive resources generated (i.e. changing the HTML text for #passive-resources-generated-total)
        passiveResourceGeneratedText.textContent = gameState.numOfPassiveResourcesGenerated;
    }
};

// attaching this callback function to the HTML element with an event listener
gokuBttn4Ele.addEventListener("click", muiProducer)


// <div class="background"></div>
//<video autoplay loop muted plays-inline class="video">
//<source src="kidgoku.mp4" type="video/mp4">
//</video>